[
  {
    "comments": [
      {
        "line": 1,
        "value": "#/*"
      },
      {
        "line": 2,
        "value": "#*  Copyright 2017-2018 Adobe."
      },
      {
        "line": 3,
        "value": "#*"
      },
      {
        "line": 4,
        "value": "#*  Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "line": 5,
        "value": "#*  you may not use this file except in compliance with the License."
      },
      {
        "line": 6,
        "value": "#*  You may obtain a copy of the License at"
      },
      {
        "line": 7,
        "value": "#*"
      },
      {
        "line": 8,
        "value": "#*          http://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "line": 9,
        "value": "#*"
      },
      {
        "line": 10,
        "value": "#*  Unless required by applicable law or agreed to in writing, software"
      },
      {
        "line": 11,
        "value": "#*  distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "line": 12,
        "value": "#*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "line": 13,
        "value": "#*  See the License for the specific language governing permissions and"
      },
      {
        "line": 14,
        "value": "#*  limitations under the License."
      },
      {
        "line": 15,
        "value": "#*/"
      },
      {
        "line": 16,
        "value": "#Author: mamishra@adobe.com"
      },
      {
        "line": 17,
        "value": "#Keywords Summary : This feature is all about smoke test cases of Triggers"
      }
    ],
    "line": 20,
    "elements": [
      {
        "line": 22,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 7716192,
              "status": "passed"
            },
            "line": 23,
            "name": "configure ssl \u003d true",
            "match": {
              "arguments": [
                {
                  "val": "ssl",
                  "offset": 10
                },
                {
                  "val": "true",
                  "offset": 16
                }
              ],
              "location": "StepDefs.configure(String,String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 23,
              "value": "13:46:53.206 karate.env system property was: null \n"
            }
          },
          {
            "result": {
              "duration": 68567,
              "status": "passed"
            },
            "line": 24,
            "name": "def nameSpace \u003d test_user_ns",
            "match": {
              "arguments": [
                {
                  "val": "nameSpace",
                  "offset": 4
                },
                {
                  "val": "test_user_ns",
                  "offset": 16
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 954965,
              "status": "passed"
            },
            "line": 25,
            "name": "def scriptcode \u003d call read(\u0027classpath:com/karate/openwhisk/functions/hello-world.js\u0027)",
            "match": {
              "arguments": [
                {
                  "val": "scriptcode",
                  "offset": 4
                },
                {
                  "val": "call read(\u0027classpath:com/karate/openwhisk/functions/hello-world.js\u0027)",
                  "offset": 17
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 967537,
              "status": "passed"
            },
            "line": 26,
            "name": "def scriptcodeWithParam \u003d call read(\u0027classpath:com/karate/openwhisk/functions/greetings.js\u0027)",
            "match": {
              "arguments": [
                {
                  "val": "scriptcodeWithParam",
                  "offset": 4
                },
                {
                  "val": "call read(\u0027classpath:com/karate/openwhisk/functions/greetings.js\u0027)",
                  "offset": 26
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 0,
            "name": "call [This feature file will either use the NS credentials provided or get the NS of guest] [This line is required please do not delete - or the functions cannot be called] classpath:com/karate/openwhisk/utils/get-auth.feature",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 25,
            "name": "configure ssl \u003d true",
            "match": {
              "arguments": [
                {
                  "val": "ssl",
                  "offset": 10
                },
                {
                  "val": "true",
                  "offset": 16
                }
              ],
              "location": "StepDefs.configure(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 26,
            "name": "def nameSpace \u003d test_user_ns",
            "match": {
              "arguments": [
                {
                  "val": "nameSpace",
                  "offset": 4
                },
                {
                  "val": "test_user_ns",
                  "offset": 16
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 27,
            "name": "def base64decoding \u003d read(\u0027classpath:com/karate/openwhisk/utils/base64_decode.js\u0027)",
            "match": {
              "arguments": [
                {
                  "val": "base64decoding",
                  "offset": 4
                },
                {
                  "val": "read(\u0027classpath:com/karate/openwhisk/utils/base64_decode.js\u0027)",
                  "offset": 21
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "print \"Start\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Start\"",
                  "offset": 6
                }
              ],
              "location": "StepDefs.print(String\u003e)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 28,
              "value": "13:46:53.229 [print] Start\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 0,
            "name": "call [Create Namespace] [Get NS credentials] classpath:com/karate/openwhisk/wskadmin/get-user.feature",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 24,
            "name": "configure ssl \u003d true",
            "match": {
              "arguments": [
                {
                  "val": "ssl",
                  "offset": 10
                },
                {
                  "val": "true",
                  "offset": 16
                }
              ],
              "location": "StepDefs.configure(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 25,
            "name": "def nameSpace \u003d test_user_ns",
            "match": {
              "arguments": [
                {
                  "val": "nameSpace",
                  "offset": 4
                },
                {
                  "val": "test_user_ns",
                  "offset": 16
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 26,
            "name": "def base64encoding \u003d read(\u0027classpath:com/karate/openwhisk/utils/base64.js\u0027)",
            "match": {
              "arguments": [
                {
                  "val": "base64encoding",
                  "offset": 4
                },
                {
                  "val": "read(\u0027classpath:com/karate/openwhisk/utils/base64.js\u0027)",
                  "offset": 21
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 30,
            "name": "url AdminBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "AdminBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "print \"I am here in get-user\"",
            "match": {
              "arguments": [
                {
                  "val": "\"I am here in get-user\"",
                  "offset": 6
                }
              ],
              "location": "StepDefs.print(String\u003e)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 31,
              "value": "13:46:53.244 [print] I am here in get-user\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "def DBpath \u003d",
            "match": {
              "arguments": [
                {
                  "val": "DBpath",
                  "offset": 4
                }
              ],
              "location": "StepDefs.defDocString(String,String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 33,
              "value": "\r\nif (BaseUrl.match (\u0027rtbeta\u0027))\r\n{\r\n DBpath \u003d \u0027/whisk_dev_subjects/\u0027;\r\n}\r\nif (AdminBaseUrl.match (\u0027bluemix\u0027))\r\n{\r\n DBpath \u003d \u0027/whisk_dev_subjects/\u0027;\r\n}\r\nelse{\r\n DBpath \u003d \u0027/local_subjects/\u0027;\r\n}\r\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 48,
                "value": "#And path \u0027/whisk_local_subjects/\u0027+nameSpace"
              }
            ],
            "line": 49,
            "name": "path DBpath+nameSpace",
            "match": {
              "arguments": [
                {
                  "val": "DBpath+nameSpace",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 50,
            "name": "header Authorization \u003d AdminAuth",
            "match": {
              "arguments": [
                {
                  "val": "Authorization",
                  "offset": 7
                },
                {
                  "val": "AdminAuth",
                  "offset": 23
                }
              ],
              "location": "StepDefs.header(String,String\u003e)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 51,
            "name": "header Content-Type \u003d \u0027application/json\u0027",
            "match": {
              "arguments": [
                {
                  "val": "Content-Type",
                  "offset": 7
                },
                {
                  "val": "\u0027application/json\u0027",
                  "offset": 22
                }
              ],
              "location": "StepDefs.header(String,String\u003e)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 52,
              "value": "13:46:53.250 request:\n1 \u003e GET https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Authorization: Basic MzY3OGExMmItZmM2NC00Y2VmLWFiOTctZDdiMjhjNzdmYmUxLWJsdWVtaXg6MjMzMjc0NDk5Yjk5NmZiMzlhZTRlODNlMzMyOWZjMzVjYjVjMTk0MzU0ZjMwYzQ5YjE5NWU5N2Q0NjU1YzE3NQ\u003d\u003d\n1 \u003e Connection: Keep-Alive\n1 \u003e Content-Type: application/json\n1 \u003e Host: 3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_131)\n\n13:46:54.747 response time in milliseconds: 1491\n1 \u003c 404\n1 \u003c Cache-Control: must-revalidate\n1 \u003c Content-Length: 41\n1 \u003c Content-Type: application/json\n1 \u003c Date: Mon, 27 Aug 2018 08:16:53 GMT\n1 \u003c Server: CouchDB/2.1.1 (Erlang OTP/17)\n1 \u003c Strict-Transport-Security: max-age\u003d31536000\n1 \u003c Via: 1.1 lb1.bm-cc-us-south-02 (Glum/1.63.0)\n1 \u003c X-Cloudant-Backend: bm-cc-us-south-02\n1 \u003c X-Cloudant-Request-Class: lookup\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Couch-Request-ID: 2c86e8e849\n1 \u003c X-Frame-Options: DENY\n{\"error\":\"not_found\",\"reason\":\"missing\"}\n\n\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "error_message": "com.intuit.karate.exception.KarateException: status code was: 404, expected: 200, response time: 1491, url: https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test, response: {\"error\":\"not_found\",\"reason\":\"missing\"}\n\tat com.intuit.karate.StepDefs.status(StepDefs.java:491)\n\tat ✽.Then status 200(classpath:com/karate/openwhisk/wskadmin/get-user.feature:53)\n",
              "status": "failed"
            },
            "line": 53,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "",
              "line": 53,
              "value": "13:46:54.748 status code was: 404, expected: 200, response time: 1491, url: https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test, response: {\"error\":\"not_found\",\"reason\":\"missing\"}\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "error_message": "java.lang.RuntimeException: javascript evaluation failed: if (!test_user_key)\n{\nvar getNSCreds \u003d karate.callSingle(\u0027classpath:com/karate/openwhisk/wskadmin/get-user.feature\u0027);\nvar test\u003dgetNSCreds.Auth; \nkarate.set(\u0027authFunction\u0027,  \u0027Basic \u0027+getNSCreds.Auth);\nkarate.set(\u0027guid\u0027, getNSCreds.uuid[0]);\n}   \nelse\n{\nvar getGUID \u003d base64decoding(test_user_key); \nkarate.set(\u0027authFunction\u0027 , \u0027Basic \u0027+test_user_key);\nkarate.set(\u0027guid\u0027 , getGUID);\nkarate.log(\u0027I am here\u0027);\nkarate.log(getGUID);\n}, \n\nstatus code was: 404, expected: 200, response time: 1491, url: https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test, response: {\"error\":\"not_found\",\"reason\":\"missing\"}\n\tat com.intuit.karate.ScriptBindings.eval(ScriptBindings.java:144)\n\tat com.intuit.karate.ScriptBindings.updateBindingsAndEval(ScriptBindings.java:134)\n\tat com.intuit.karate.ScriptBindings.evalInNashorn(ScriptBindings.java:119)\n\tat com.intuit.karate.Script.evalJsExpression(Script.java:371)\n\tat com.intuit.karate.StepDefs.eval(StepDefs.java:592)\n\tat com.intuit.karate.StepDefs.evalDocString(StepDefs.java:597)\n\tat ✽.* eval(classpath:com/karate/openwhisk/utils/get-auth.feature:29)\nCaused by: com.intuit.karate.exception.KarateException: \n\nstatus code was: 404, expected: 200, response time: 1491, url: https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test, response: {\"error\":\"not_found\",\"reason\":\"missing\"}\n\tat com.intuit.karate.Script.evalFeatureCall(Script.java:1667)\n\tat com.intuit.karate.ScriptBridge.call(ScriptBridge.java:240)\n\tat com.intuit.karate.ScriptBridge.callSingle(ScriptBridge.java:269)\n\tat com.intuit.karate.ScriptBridge.callSingle(ScriptBridge.java:251)\n\tat jdk.nashorn.internal.scripts.Script$15$\\^eval\\_.:program(\u003ceval\u003e:3)\n\tat jdk.nashorn.internal.runtime.ScriptFunctionData.invoke(ScriptFunctionData.java:637)\n\tat jdk.nashorn.internal.runtime.ScriptFunction.invoke(ScriptFunction.java:494)\n\tat jdk.nashorn.internal.runtime.ScriptRuntime.apply(ScriptRuntime.java:393)\n\tat jdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:449)\n\tat jdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:406)\n\tat jdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:402)\n\tat jdk.nashorn.api.scripting.NashornScriptEngine.eval(NashornScriptEngine.java:155)\n\tat javax.script.AbstractScriptEngine.eval(AbstractScriptEngine.java:233)\n\tat com.intuit.karate.ScriptBindings.eval(ScriptBindings.java:139)\n\tat com.intuit.karate.ScriptBindings.updateBindingsAndEval(ScriptBindings.java:134)\n\tat com.intuit.karate.ScriptBindings.evalInNashorn(ScriptBindings.java:119)\n\tat com.intuit.karate.Script.evalJsExpression(Script.java:371)\n\tat com.intuit.karate.StepDefs.eval(StepDefs.java:592)\n\tat com.intuit.karate.StepDefs.evalDocString(StepDefs.java:597)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:38)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat com.intuit.karate.cucumber.CucumberUtils.runStep(CucumberUtils.java:201)\n\tat com.intuit.karate.cucumber.CucumberUtils.runCalledStep(CucumberUtils.java:169)\n\tat com.intuit.karate.cucumber.AsyncStep.lambda$submit$0(AsyncStep.java:48)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncStep.submit(AsyncStep.java:47)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$submit$1(AsyncScenario.java:60)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncScenario.submit(AsyncScenario.java:58)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$null$0(AsyncScenario.java:68)\n\tat com.intuit.karate.cucumber.AsyncStep.lambda$submit$0(AsyncStep.java:64)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncStep.submit(AsyncStep.java:47)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$submit$1(AsyncScenario.java:60)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncScenario.submit(AsyncScenario.java:58)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$null$0(AsyncScenario.java:68)\n\tat com.intuit.karate.cucumber.AsyncStep.lambda$submit$0(AsyncStep.java:64)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncStep.submit(AsyncStep.java:47)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$submit$1(AsyncScenario.java:60)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncScenario.submit(AsyncScenario.java:58)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$null$0(AsyncScenario.java:68)\n\tat com.intuit.karate.cucumber.AsyncStep.lambda$submit$0(AsyncStep.java:64)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncStep.submit(AsyncStep.java:47)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$submit$1(AsyncScenario.java:60)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncScenario.submit(AsyncScenario.java:58)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$null$0(AsyncScenario.java:68)\n\tat com.intuit.karate.cucumber.AsyncStep.lambda$submit$0(AsyncStep.java:64)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncStep.submit(AsyncStep.java:47)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$submit$1(AsyncScenario.java:60)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncScenario.submit(AsyncScenario.java:58)\n\tat com.intuit.karate.cucumber.AsyncSection.lambda$submit$1(AsyncSection.java:67)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncSection.submit(AsyncSection.java:57)\n\tat com.intuit.karate.cucumber.AsyncFeature.lambda$submit$1(AsyncFeature.java:54)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncFeature.submit(AsyncFeature.java:52)\n\tat com.intuit.karate.cucumber.CucumberUtils.callSync(CucumberUtils.java:144)\n\tat com.intuit.karate.Script.evalFeatureCall(Script.java:1681)\n\tat com.intuit.karate.Script.evalFeatureCall(Script.java:1662)\n\tat com.intuit.karate.Script.call(Script.java:1599)\n\tat com.intuit.karate.Script.callWithCache(Script.java:183)\n\tat com.intuit.karate.Script.evalKarateExpression(Script.java:227)\n\tat com.intuit.karate.Script.evalKarateExpression(Script.java:171)\n\tat com.intuit.karate.Script.assign(Script.java:601)\n\tat com.intuit.karate.Script.assign(Script.java:527)\n\tat com.intuit.karate.StepDefs.def(StepDefs.java:309)\n\tat sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:38)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat com.intuit.karate.cucumber.CucumberUtils.runStep(CucumberUtils.java:201)\n\tat com.intuit.karate.cucumber.KarateRuntime.runStep(KarateRuntime.java:89)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.runBackground(CucumberScenario.java:59)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:42)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat com.intuit.karate.cucumber.CucumberRunner.lambda$parallel$0(CucumberRunner.java:101)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:748)\n",
              "status": "failed"
            },
            "line": 29,
            "name": "eval",
            "match": {
              "location": "StepDefs.evalDocString(String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 30,
              "value": "if (!test_user_key)\n{\nvar getNSCreds \u003d karate.callSingle(\u0027classpath:com/karate/openwhisk/wskadmin/get-user.feature\u0027);\nvar test\u003dgetNSCreds.Auth; \nkarate.set(\u0027authFunction\u0027,  \u0027Basic \u0027+getNSCreds.Auth);\nkarate.set(\u0027guid\u0027, getNSCreds.uuid[0]);\n}   \nelse\n{\nvar getGUID \u003d base64decoding(test_user_key); \nkarate.set(\u0027authFunction\u0027 , \u0027Basic \u0027+test_user_key);\nkarate.set(\u0027guid\u0027 , getGUID);\nkarate.log(\u0027I am here\u0027);\nkarate.log(getGUID);\n}"
            }
          },
          {
            "result": {
              "duration": 1538489046,
              "error_message": "com.intuit.karate.exception.KarateException: \n\njavascript evaluation failed: if (!test_user_key)\n{\nvar getNSCreds \u003d karate.callSingle(\u0027classpath:com/karate/openwhisk/wskadmin/get-user.feature\u0027);\nvar test\u003dgetNSCreds.Auth; \nkarate.set(\u0027authFunction\u0027,  \u0027Basic \u0027+getNSCreds.Auth);\nkarate.set(\u0027guid\u0027, getNSCreds.uuid[0]);\n}   \nelse\n{\nvar getGUID \u003d base64decoding(test_user_key); \nkarate.set(\u0027authFunction\u0027 , \u0027Basic \u0027+test_user_key);\nkarate.set(\u0027guid\u0027 , getGUID);\nkarate.log(\u0027I am here\u0027);\nkarate.log(getGUID);\n}, \n\nstatus code was: 404, expected: 200, response time: 1491, url: https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test, response: {\"error\":\"not_found\",\"reason\":\"missing\"}\n\tat com.intuit.karate.Script.evalFeatureCall(Script.java:1667)\n\tat com.intuit.karate.Script.call(Script.java:1599)\n\tat com.intuit.karate.Script.callWithCache(Script.java:183)\n\tat com.intuit.karate.Script.evalKarateExpression(Script.java:227)\n\tat com.intuit.karate.Script.evalKarateExpression(Script.java:171)\n\tat com.intuit.karate.Script.assign(Script.java:601)\n\tat com.intuit.karate.Script.assign(Script.java:527)\n\tat com.intuit.karate.StepDefs.def(StepDefs.java:309)\n\tat ✽.* def getAuth \u003d callonce read(\u0027classpath:com/karate/openwhisk/utils/get-auth.feature\u0027)(/Users/rtripath/repo/OPENWHISK-KARATE/ow-karate/target/test-classes/com/karate/openwhisk/smoketests/TC06_SmokeTest_Rule.feature:27)\n",
              "status": "failed"
            },
            "line": 27,
            "name": "def getAuth \u003d callonce read(\u0027classpath:com/karate/openwhisk/utils/get-auth.feature\u0027)",
            "match": {
              "arguments": [
                {
                  "val": "getAuth",
                  "offset": 4
                },
                {
                  "val": "callonce read(\u0027classpath:com/karate/openwhisk/utils/get-auth.feature\u0027)",
                  "offset": 14
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 27,
              "value": "13:46:54.749 feature call failed: classpath:com/karate/openwhisk/wskadmin/get-user.feature\narg: null\n\nstatus code was: 404, expected: 200, response time: 1491, url: https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test, response: {\"error\":\"not_found\",\"reason\":\"missing\"}\n13:46:54.750 feature call failed: classpath:com/karate/openwhisk/utils/get-auth.feature\narg: null\n\njavascript evaluation failed: if (!test_user_key)\n{\nvar getNSCreds \u003d karate.callSingle(\u0027classpath:com/karate/openwhisk/wskadmin/get-user.feature\u0027);\nvar test\u003dgetNSCreds.Auth; \nkarate.set(\u0027authFunction\u0027,  \u0027Basic \u0027+getNSCreds.Auth);\nkarate.set(\u0027guid\u0027, getNSCreds.uuid[0]);\n}   \nelse\n{\nvar getGUID \u003d base64decoding(test_user_key); \nkarate.set(\u0027authFunction\u0027 , \u0027Basic \u0027+test_user_key);\nkarate.set(\u0027guid\u0027 , getGUID);\nkarate.log(\u0027I am here\u0027);\nkarate.log(getGUID);\n}, \n\nstatus code was: 404, expected: 200, response time: 1491, url: https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test, response: {\"error\":\"not_found\",\"reason\":\"missing\"}\n"
            }
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 28,
            "name": "def Auth \u003d getAuth.Auth",
            "match": {},
            "keyword": "* "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 30,
            "value": "#@ignore"
          }
        ],
        "line": 31,
        "name": "As a user i want to verify create rule, get rule, update rule,list rule and delete rule",
        "description": "",
        "id": "this-feature-contains-smoke-test-cases-of-openwhisk-triggers;as-a-user-i-want-to-verify-create-rule,-get-rule,-update-rule,list-rule-and-delete-rule",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "skipped"
            },
            "line": 32,
            "name": "print \"Test case started --\u003e verify create rule, get rule, update rule,list rule and delete rule\"",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 33,
                "value": "#create a trigger"
              }
            ],
            "line": 34,
            "name": "def createTrigger \u003d call read(\u0027classpath:com/karate/openwhisk/wsktriggers/create-trigger.feature\u0027) {nameSpace:\u0027#(nameSpace)\u0027 ,Auth:\u0027#(Auth)\u0027}",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 35,
            "name": "match createTrigger.responseStatusCode \u003d\u003d 200",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 36,
            "name": "def triggerName \u003d createTrigger.trgrName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 37,
            "name": "print \"Successfully Created an trigger\"",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 38,
                "value": "#create a action"
              }
            ],
            "line": 39,
            "name": "def createAction \u003d call read(\u0027classpath:com/karate/openwhisk/wskactions/create-action.feature\u0027) {script:\u0027#(scriptcode)\u0027 ,nameSpace:\u0027#(nameSpace)\u0027 ,Auth:\u0027#(Auth)\u0027}",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 40,
            "name": "def actionName \u003d createAction.actName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 41,
            "name": "match createAction.responseStatusCode \u003d\u003d 200",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 42,
            "name": "print \"Successfully Created an action\"",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 43,
                "value": "#create a rule"
              }
            ],
            "line": 44,
            "name": "def trgrName \u003d \u0027/\u0027+nameSpace +\u0027/\u0027+triggerName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 45,
            "name": "def actName \u003d \u0027/\u0027+nameSpace +\u0027/\u0027+actionName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 46,
            "name": "def createRule \u003d call read(\u0027classpath:com/karate/openwhisk/wskrules/create-rule.feature\u0027) {triggerName:\u0027#(trgrName)\u0027, actionName:\u0027#(actName)\u0027 ,nameSpace:\u0027#(nameSpace)\u0027 ,Auth:\u0027#(Auth)\u0027}",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 47,
            "name": "def ruleName \u003d createRule.rulName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 48,
            "name": "match createRule.responseStatusCode \u003d\u003d 200",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 49,
            "name": "print \u0027successfully created the rule\u0027",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 50,
                "value": "#get the rule"
              }
            ],
            "line": 51,
            "name": "def getRule \u003d call read(\u0027classpath:com/karate/openwhisk/wskrules/get-rule.feature\u0027) {nameSpace:\u0027#(nameSpace)\u0027 ,Auth:\u0027#(Auth)\u0027,ruleName:\u0027#(ruleName)\u0027}",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 52,
            "name": "match getRule.responseStatusCode \u003d\u003d 200",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 53,
            "name": "def actualRuleName \u003d getRule.rulName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 54,
            "name": "match actualRuleName \u003d\u003d ruleName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 55,
            "name": "print \"Asserted \"+actualRuleName+\" with \" + ruleName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 56,
            "name": "print \"Successfully got the rule details\"",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 58,
                "value": "#update the rule"
              },
              {
                "line": 59,
                "value": "# create another trigger to update the rule"
              }
            ],
            "line": 60,
            "name": "def trgrName1 \u003d \u0027Trigger\u0027+java.util.UUID.randomUUID()",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 61,
            "name": "def createTrigger \u003d call read(\u0027classpath:com/karate/openwhisk/wsktriggers/create-trigger.feature\u0027) {nameSpace:\u0027#(nameSpace)\u0027 ,Auth:\u0027#(Auth)\u0027, triggerName:\u0027#(trgrName1)\u0027}",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 62,
            "name": "def triggerName1 \u003d createTrigger.trgrName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 63,
            "name": "match createTrigger.responseStatusCode \u003d\u003d 200",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 64,
            "name": "print \"Successfully Created an trigger\"",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 65,
                "value": "#create another action to update the rule"
              }
            ],
            "line": 66,
            "name": "def actName1 \u003d \u0027Testing\u0027+java.util.UUID.randomUUID()",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 67,
            "name": "def createAction \u003d call read(\u0027classpath:com/karate/openwhisk/wskactions/create-action.feature\u0027) {actionName:\u0027#(actName1)\u0027, script:\u0027#(scriptcode)\u0027 ,nameSpace:\u0027#(nameSpace)\u0027 ,Auth:\u0027#(Auth)\u0027}",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 68,
            "name": "def actionName1 \u003d createAction.actName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 69,
            "name": "match createAction.responseStatusCode \u003d\u003d 200",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 70,
            "name": "print \"Successfully Created an action\"",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 71,
                "value": "#now updating the rule"
              }
            ],
            "line": 72,
            "name": "def trgrName \u003d \u0027/\u0027+nameSpace +\u0027/\u0027+triggerName1",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 73,
            "name": "def actName \u003d \u0027/\u0027+nameSpace +\u0027/\u0027+actionName1",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 74,
            "name": "def updateRule \u003d call read(\u0027classpath:com/karate/openwhisk/wskrules/update-rule.feature\u0027) {ruleName:\u0027#(ruleName)\u0027, triggerName:\u0027#(trgrName)\u0027, actionName:\u0027#(actName)\u0027 ,nameSpace:\u0027#(nameSpace)\u0027 ,Auth:\u0027#(Auth)\u0027}",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 75,
            "name": "def ruleName \u003d updateRule.rulName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 76,
            "name": "print ruleName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 77,
            "name": "def actualTriggerName \u003d updateRule.updateRuleResponse.trigger.name",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 78,
            "name": "match actualTriggerName \u003d\u003d trgrName1",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 79,
            "name": "print \"Asserted \"+actualTriggerName+\" with \" + trgrName1",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 80,
            "name": "def actualActionName \u003d updateRule.updateRuleResponse.action.name",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 81,
            "name": "match actualActionName \u003d\u003d actName1",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 82,
            "name": "print \"Asserted \"+actualActionName+\" with \" + actName1",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 83,
            "name": "print \"Successfully updated the rule\"",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 84,
                "value": "# List rules"
              }
            ],
            "line": 85,
            "name": "def listRules \u003d call read(\u0027classpath:com/karate/openwhisk/wskrules/list-rule.feature\u0027) {nameSpace:\u0027#(nameSpace)\u0027 ,Auth:\u0027#(Auth)\u0027}",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 86,
            "name": "print \"Successfully pulled up the list of rules\"",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 87,
                "value": "# Delete the Rule"
              }
            ],
            "line": 88,
            "name": "def deleteRule \u003d call read(\u0027classpath:com/karate/openwhisk/wskrules/delete-rule.feature\u0027) {nameSpace:\u0027#(nameSpace)\u0027 ,Auth:\u0027#(Auth)\u0027,ruleName:\u0027#(ruleName)\u0027}",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 89,
            "name": "match deleteRule.responseStatusCode \u003d\u003d 200",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 90,
            "name": "print \"Test case completed --\u003e verify create rule, get rule, update rule,list rule and delete rule\"",
            "match": {},
            "keyword": "* "
          }
        ]
      },
      {
        "line": 22,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "duration": 5548460,
              "status": "passed"
            },
            "line": 23,
            "name": "configure ssl \u003d true",
            "match": {
              "arguments": [
                {
                  "val": "ssl",
                  "offset": 10
                },
                {
                  "val": "true",
                  "offset": 16
                }
              ],
              "location": "StepDefs.configure(String,String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 23,
              "value": "13:46:54.758 karate.env system property was: null \n"
            }
          },
          {
            "result": {
              "duration": 56137,
              "status": "passed"
            },
            "line": 24,
            "name": "def nameSpace \u003d test_user_ns",
            "match": {
              "arguments": [
                {
                  "val": "nameSpace",
                  "offset": 4
                },
                {
                  "val": "test_user_ns",
                  "offset": 16
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 795366,
              "status": "passed"
            },
            "line": 25,
            "name": "def scriptcode \u003d call read(\u0027classpath:com/karate/openwhisk/functions/hello-world.js\u0027)",
            "match": {
              "arguments": [
                {
                  "val": "scriptcode",
                  "offset": 4
                },
                {
                  "val": "call read(\u0027classpath:com/karate/openwhisk/functions/hello-world.js\u0027)",
                  "offset": 17
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 554791,
              "status": "passed"
            },
            "line": 26,
            "name": "def scriptcodeWithParam \u003d call read(\u0027classpath:com/karate/openwhisk/functions/greetings.js\u0027)",
            "match": {
              "arguments": [
                {
                  "val": "scriptcodeWithParam",
                  "offset": 4
                },
                {
                  "val": "call read(\u0027classpath:com/karate/openwhisk/functions/greetings.js\u0027)",
                  "offset": 26
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 0,
            "name": "call [This feature file will either use the NS credentials provided or get the NS of guest] [This line is required please do not delete - or the functions cannot be called] classpath:com/karate/openwhisk/utils/get-auth.feature",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 25,
            "name": "configure ssl \u003d true",
            "match": {
              "arguments": [
                {
                  "val": "ssl",
                  "offset": 10
                },
                {
                  "val": "true",
                  "offset": 16
                }
              ],
              "location": "StepDefs.configure(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 26,
            "name": "def nameSpace \u003d test_user_ns",
            "match": {
              "arguments": [
                {
                  "val": "nameSpace",
                  "offset": 4
                },
                {
                  "val": "test_user_ns",
                  "offset": 16
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 27,
            "name": "def base64decoding \u003d read(\u0027classpath:com/karate/openwhisk/utils/base64_decode.js\u0027)",
            "match": {
              "arguments": [
                {
                  "val": "base64decoding",
                  "offset": 4
                },
                {
                  "val": "read(\u0027classpath:com/karate/openwhisk/utils/base64_decode.js\u0027)",
                  "offset": 21
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 28,
            "name": "print \"Start\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Start\"",
                  "offset": 6
                }
              ],
              "location": "StepDefs.print(String\u003e)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 28,
              "value": "13:46:54.770 [print] Start\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 0,
            "name": "call [Create Namespace] [Get NS credentials] classpath:com/karate/openwhisk/wskadmin/get-user.feature",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 24,
            "name": "configure ssl \u003d true",
            "match": {
              "arguments": [
                {
                  "val": "ssl",
                  "offset": 10
                },
                {
                  "val": "true",
                  "offset": 16
                }
              ],
              "location": "StepDefs.configure(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 25,
            "name": "def nameSpace \u003d test_user_ns",
            "match": {
              "arguments": [
                {
                  "val": "nameSpace",
                  "offset": 4
                },
                {
                  "val": "test_user_ns",
                  "offset": 16
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 26,
            "name": "def base64encoding \u003d read(\u0027classpath:com/karate/openwhisk/utils/base64.js\u0027)",
            "match": {
              "arguments": [
                {
                  "val": "base64encoding",
                  "offset": 4
                },
                {
                  "val": "read(\u0027classpath:com/karate/openwhisk/utils/base64.js\u0027)",
                  "offset": 21
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 30,
            "name": "url AdminBaseUrl",
            "match": {
              "arguments": [
                {
                  "val": "AdminBaseUrl",
                  "offset": 4
                }
              ],
              "location": "StepDefs.url(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 31,
            "name": "print \"I am here in get-user\"",
            "match": {
              "arguments": [
                {
                  "val": "\"I am here in get-user\"",
                  "offset": 6
                }
              ],
              "location": "StepDefs.print(String\u003e)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 31,
              "value": "13:46:54.802 [print] I am here in get-user\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 32,
            "name": "def DBpath \u003d",
            "match": {
              "arguments": [
                {
                  "val": "DBpath",
                  "offset": 4
                }
              ],
              "location": "StepDefs.defDocString(String,String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 33,
              "value": "\r\nif (BaseUrl.match (\u0027rtbeta\u0027))\r\n{\r\n DBpath \u003d \u0027/whisk_dev_subjects/\u0027;\r\n}\r\nif (AdminBaseUrl.match (\u0027bluemix\u0027))\r\n{\r\n DBpath \u003d \u0027/whisk_dev_subjects/\u0027;\r\n}\r\nelse{\r\n DBpath \u003d \u0027/local_subjects/\u0027;\r\n}\r\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "comments": [
              {
                "line": 48,
                "value": "#And path \u0027/whisk_local_subjects/\u0027+nameSpace"
              }
            ],
            "line": 49,
            "name": "path DBpath+nameSpace",
            "match": {
              "arguments": [
                {
                  "val": "DBpath+nameSpace",
                  "offset": 5
                }
              ],
              "location": "StepDefs.path(String\u003e)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 50,
            "name": "header Authorization \u003d AdminAuth",
            "match": {
              "arguments": [
                {
                  "val": "Authorization",
                  "offset": 7
                },
                {
                  "val": "AdminAuth",
                  "offset": 23
                }
              ],
              "location": "StepDefs.header(String,String\u003e)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 51,
            "name": "header Content-Type \u003d \u0027application/json\u0027",
            "match": {
              "arguments": [
                {
                  "val": "Content-Type",
                  "offset": 7
                },
                {
                  "val": "\u0027application/json\u0027",
                  "offset": 22
                }
              ],
              "location": "StepDefs.header(String,String\u003e)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 0,
              "status": "passed"
            },
            "line": 52,
            "name": "method get",
            "match": {
              "arguments": [
                {
                  "val": "get",
                  "offset": 7
                }
              ],
              "location": "StepDefs.method(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 52,
              "value": "13:46:54.807 request:\n1 \u003e GET https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test\n1 \u003e Accept-Encoding: gzip,deflate\n1 \u003e Authorization: Basic MzY3OGExMmItZmM2NC00Y2VmLWFiOTctZDdiMjhjNzdmYmUxLWJsdWVtaXg6MjMzMjc0NDk5Yjk5NmZiMzlhZTRlODNlMzMyOWZjMzVjYjVjMTk0MzU0ZjMwYzQ5YjE5NWU5N2Q0NjU1YzE3NQ\u003d\u003d\n1 \u003e Connection: Keep-Alive\n1 \u003e Content-Type: application/json\n1 \u003e Host: 3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443\n1 \u003e User-Agent: Apache-HttpClient/4.5.5 (Java/1.8.0_131)\n\n13:46:55.869 response time in milliseconds: 1061\n1 \u003c 404\n1 \u003c Cache-Control: must-revalidate\n1 \u003c Content-Length: 41\n1 \u003c Content-Type: application/json\n1 \u003c Date: Mon, 27 Aug 2018 08:16:54 GMT\n1 \u003c Server: CouchDB/2.1.1 (Erlang OTP/17)\n1 \u003c Strict-Transport-Security: max-age\u003d31536000\n1 \u003c Via: 1.1 lb1.bm-cc-us-south-02 (Glum/1.63.0)\n1 \u003c X-Cloudant-Backend: bm-cc-us-south-02\n1 \u003c X-Cloudant-Request-Class: lookup\n1 \u003c X-Content-Type-Options: nosniff\n1 \u003c X-Couch-Request-ID: 3a38dfaa48\n1 \u003c X-Frame-Options: DENY\n{\"error\":\"not_found\",\"reason\":\"missing\"}\n\n\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "error_message": "com.intuit.karate.exception.KarateException: status code was: 404, expected: 200, response time: 1061, url: https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test, response: {\"error\":\"not_found\",\"reason\":\"missing\"}\n\tat com.intuit.karate.StepDefs.status(StepDefs.java:491)\n\tat ✽.Then status 200(classpath:com/karate/openwhisk/wskadmin/get-user.feature:53)\n",
              "status": "failed"
            },
            "line": 53,
            "name": "status 200",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 7
                }
              ],
              "location": "StepDefs.status(int)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "",
              "line": 53,
              "value": "13:46:55.870 status code was: 404, expected: 200, response time: 1061, url: https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test, response: {\"error\":\"not_found\",\"reason\":\"missing\"}\n"
            }
          },
          {
            "result": {
              "duration": 0,
              "error_message": "java.lang.RuntimeException: javascript evaluation failed: if (!test_user_key)\n{\nvar getNSCreds \u003d karate.callSingle(\u0027classpath:com/karate/openwhisk/wskadmin/get-user.feature\u0027);\nvar test\u003dgetNSCreds.Auth; \nkarate.set(\u0027authFunction\u0027,  \u0027Basic \u0027+getNSCreds.Auth);\nkarate.set(\u0027guid\u0027, getNSCreds.uuid[0]);\n}   \nelse\n{\nvar getGUID \u003d base64decoding(test_user_key); \nkarate.set(\u0027authFunction\u0027 , \u0027Basic \u0027+test_user_key);\nkarate.set(\u0027guid\u0027 , getGUID);\nkarate.log(\u0027I am here\u0027);\nkarate.log(getGUID);\n}, \n\nstatus code was: 404, expected: 200, response time: 1061, url: https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test, response: {\"error\":\"not_found\",\"reason\":\"missing\"}\n\tat com.intuit.karate.ScriptBindings.eval(ScriptBindings.java:144)\n\tat com.intuit.karate.ScriptBindings.updateBindingsAndEval(ScriptBindings.java:134)\n\tat com.intuit.karate.ScriptBindings.evalInNashorn(ScriptBindings.java:119)\n\tat com.intuit.karate.Script.evalJsExpression(Script.java:371)\n\tat com.intuit.karate.StepDefs.eval(StepDefs.java:592)\n\tat com.intuit.karate.StepDefs.evalDocString(StepDefs.java:597)\n\tat ✽.* eval(classpath:com/karate/openwhisk/utils/get-auth.feature:29)\nCaused by: com.intuit.karate.exception.KarateException: \n\nstatus code was: 404, expected: 200, response time: 1061, url: https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test, response: {\"error\":\"not_found\",\"reason\":\"missing\"}\n\tat com.intuit.karate.Script.evalFeatureCall(Script.java:1667)\n\tat com.intuit.karate.ScriptBridge.call(ScriptBridge.java:240)\n\tat com.intuit.karate.ScriptBridge.callSingle(ScriptBridge.java:269)\n\tat com.intuit.karate.ScriptBridge.callSingle(ScriptBridge.java:251)\n\tat jdk.nashorn.internal.scripts.Script$15$\\^eval\\_.:program(\u003ceval\u003e:3)\n\tat jdk.nashorn.internal.runtime.ScriptFunctionData.invoke(ScriptFunctionData.java:637)\n\tat jdk.nashorn.internal.runtime.ScriptFunction.invoke(ScriptFunction.java:494)\n\tat jdk.nashorn.internal.runtime.ScriptRuntime.apply(ScriptRuntime.java:393)\n\tat jdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:449)\n\tat jdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:406)\n\tat jdk.nashorn.api.scripting.NashornScriptEngine.evalImpl(NashornScriptEngine.java:402)\n\tat jdk.nashorn.api.scripting.NashornScriptEngine.eval(NashornScriptEngine.java:155)\n\tat javax.script.AbstractScriptEngine.eval(AbstractScriptEngine.java:233)\n\tat com.intuit.karate.ScriptBindings.eval(ScriptBindings.java:139)\n\tat com.intuit.karate.ScriptBindings.updateBindingsAndEval(ScriptBindings.java:134)\n\tat com.intuit.karate.ScriptBindings.evalInNashorn(ScriptBindings.java:119)\n\tat com.intuit.karate.Script.evalJsExpression(Script.java:371)\n\tat com.intuit.karate.StepDefs.eval(StepDefs.java:592)\n\tat com.intuit.karate.StepDefs.evalDocString(StepDefs.java:597)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:38)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat com.intuit.karate.cucumber.CucumberUtils.runStep(CucumberUtils.java:201)\n\tat com.intuit.karate.cucumber.CucumberUtils.runCalledStep(CucumberUtils.java:169)\n\tat com.intuit.karate.cucumber.AsyncStep.lambda$submit$0(AsyncStep.java:48)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncStep.submit(AsyncStep.java:47)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$submit$1(AsyncScenario.java:60)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncScenario.submit(AsyncScenario.java:58)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$null$0(AsyncScenario.java:68)\n\tat com.intuit.karate.cucumber.AsyncStep.lambda$submit$0(AsyncStep.java:64)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncStep.submit(AsyncStep.java:47)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$submit$1(AsyncScenario.java:60)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncScenario.submit(AsyncScenario.java:58)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$null$0(AsyncScenario.java:68)\n\tat com.intuit.karate.cucumber.AsyncStep.lambda$submit$0(AsyncStep.java:64)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncStep.submit(AsyncStep.java:47)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$submit$1(AsyncScenario.java:60)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncScenario.submit(AsyncScenario.java:58)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$null$0(AsyncScenario.java:68)\n\tat com.intuit.karate.cucumber.AsyncStep.lambda$submit$0(AsyncStep.java:64)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncStep.submit(AsyncStep.java:47)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$submit$1(AsyncScenario.java:60)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncScenario.submit(AsyncScenario.java:58)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$null$0(AsyncScenario.java:68)\n\tat com.intuit.karate.cucumber.AsyncStep.lambda$submit$0(AsyncStep.java:64)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncStep.submit(AsyncStep.java:47)\n\tat com.intuit.karate.cucumber.AsyncScenario.lambda$submit$1(AsyncScenario.java:60)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncScenario.submit(AsyncScenario.java:58)\n\tat com.intuit.karate.cucumber.AsyncSection.lambda$submit$1(AsyncSection.java:67)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncSection.submit(AsyncSection.java:57)\n\tat com.intuit.karate.cucumber.AsyncFeature.lambda$submit$1(AsyncFeature.java:54)\n\tat com.intuit.karate.cucumber.CucumberUtils.lambda$static$0(CucumberUtils.java:138)\n\tat com.intuit.karate.cucumber.AsyncFeature.submit(AsyncFeature.java:52)\n\tat com.intuit.karate.cucumber.CucumberUtils.callSync(CucumberUtils.java:144)\n\tat com.intuit.karate.Script.evalFeatureCall(Script.java:1681)\n\tat com.intuit.karate.Script.evalFeatureCall(Script.java:1662)\n\tat com.intuit.karate.Script.call(Script.java:1599)\n\tat com.intuit.karate.Script.callWithCache(Script.java:183)\n\tat com.intuit.karate.Script.evalKarateExpression(Script.java:227)\n\tat com.intuit.karate.Script.evalKarateExpression(Script.java:171)\n\tat com.intuit.karate.Script.assign(Script.java:601)\n\tat com.intuit.karate.Script.assign(Script.java:527)\n\tat com.intuit.karate.StepDefs.def(StepDefs.java:309)\n\tat sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaStepDefinition.execute(JavaStepDefinition.java:38)\n\tat cucumber.runtime.StepDefinitionMatch.runStep(StepDefinitionMatch.java:37)\n\tat com.intuit.karate.cucumber.CucumberUtils.runStep(CucumberUtils.java:201)\n\tat com.intuit.karate.cucumber.KarateRuntime.runStep(KarateRuntime.java:89)\n\tat cucumber.runtime.model.StepContainer.runStep(StepContainer.java:44)\n\tat cucumber.runtime.model.StepContainer.runSteps(StepContainer.java:39)\n\tat cucumber.runtime.model.CucumberScenario.runBackground(CucumberScenario.java:59)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:42)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat com.intuit.karate.cucumber.CucumberRunner.lambda$parallel$0(CucumberRunner.java:101)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:748)\n",
              "status": "failed"
            },
            "line": 29,
            "name": "eval",
            "match": {
              "location": "StepDefs.evalDocString(String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 30,
              "value": "if (!test_user_key)\n{\nvar getNSCreds \u003d karate.callSingle(\u0027classpath:com/karate/openwhisk/wskadmin/get-user.feature\u0027);\nvar test\u003dgetNSCreds.Auth; \nkarate.set(\u0027authFunction\u0027,  \u0027Basic \u0027+getNSCreds.Auth);\nkarate.set(\u0027guid\u0027, getNSCreds.uuid[0]);\n}   \nelse\n{\nvar getGUID \u003d base64decoding(test_user_key); \nkarate.set(\u0027authFunction\u0027 , \u0027Basic \u0027+test_user_key);\nkarate.set(\u0027guid\u0027 , getGUID);\nkarate.log(\u0027I am here\u0027);\nkarate.log(getGUID);\n}"
            }
          },
          {
            "result": {
              "duration": 1116729866,
              "error_message": "com.intuit.karate.exception.KarateException: \n\njavascript evaluation failed: if (!test_user_key)\n{\nvar getNSCreds \u003d karate.callSingle(\u0027classpath:com/karate/openwhisk/wskadmin/get-user.feature\u0027);\nvar test\u003dgetNSCreds.Auth; \nkarate.set(\u0027authFunction\u0027,  \u0027Basic \u0027+getNSCreds.Auth);\nkarate.set(\u0027guid\u0027, getNSCreds.uuid[0]);\n}   \nelse\n{\nvar getGUID \u003d base64decoding(test_user_key); \nkarate.set(\u0027authFunction\u0027 , \u0027Basic \u0027+test_user_key);\nkarate.set(\u0027guid\u0027 , getGUID);\nkarate.log(\u0027I am here\u0027);\nkarate.log(getGUID);\n}, \n\nstatus code was: 404, expected: 200, response time: 1061, url: https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test, response: {\"error\":\"not_found\",\"reason\":\"missing\"}\n\tat com.intuit.karate.Script.evalFeatureCall(Script.java:1667)\n\tat com.intuit.karate.Script.call(Script.java:1599)\n\tat com.intuit.karate.Script.callWithCache(Script.java:183)\n\tat com.intuit.karate.Script.evalKarateExpression(Script.java:227)\n\tat com.intuit.karate.Script.evalKarateExpression(Script.java:171)\n\tat com.intuit.karate.Script.assign(Script.java:601)\n\tat com.intuit.karate.Script.assign(Script.java:527)\n\tat com.intuit.karate.StepDefs.def(StepDefs.java:309)\n\tat ✽.* def getAuth \u003d callonce read(\u0027classpath:com/karate/openwhisk/utils/get-auth.feature\u0027)(/Users/rtripath/repo/OPENWHISK-KARATE/ow-karate/target/test-classes/com/karate/openwhisk/smoketests/TC06_SmokeTest_Rule.feature:27)\n",
              "status": "failed"
            },
            "line": 27,
            "name": "def getAuth \u003d callonce read(\u0027classpath:com/karate/openwhisk/utils/get-auth.feature\u0027)",
            "match": {
              "arguments": [
                {
                  "val": "getAuth",
                  "offset": 4
                },
                {
                  "val": "callonce read(\u0027classpath:com/karate/openwhisk/utils/get-auth.feature\u0027)",
                  "offset": 14
                }
              ],
              "location": "StepDefs.def(String,String)"
            },
            "keyword": "* ",
            "doc_string": {
              "content_type": "",
              "line": 27,
              "value": "13:46:55.877 feature call failed: classpath:com/karate/openwhisk/wskadmin/get-user.feature\narg: null\n\nstatus code was: 404, expected: 200, response time: 1061, url: https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test, response: {\"error\":\"not_found\",\"reason\":\"missing\"}\n13:46:55.878 feature call failed: classpath:com/karate/openwhisk/utils/get-auth.feature\narg: null\n\njavascript evaluation failed: if (!test_user_key)\n{\nvar getNSCreds \u003d karate.callSingle(\u0027classpath:com/karate/openwhisk/wskadmin/get-user.feature\u0027);\nvar test\u003dgetNSCreds.Auth; \nkarate.set(\u0027authFunction\u0027,  \u0027Basic \u0027+getNSCreds.Auth);\nkarate.set(\u0027guid\u0027, getNSCreds.uuid[0]);\n}   \nelse\n{\nvar getGUID \u003d base64decoding(test_user_key); \nkarate.set(\u0027authFunction\u0027 , \u0027Basic \u0027+test_user_key);\nkarate.set(\u0027guid\u0027 , getGUID);\nkarate.log(\u0027I am here\u0027);\nkarate.log(getGUID);\n}, \n\nstatus code was: 404, expected: 200, response time: 1061, url: https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test, response: {\"error\":\"not_found\",\"reason\":\"missing\"}\n"
            }
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 28,
            "name": "def Auth \u003d getAuth.Auth",
            "match": {},
            "keyword": "* "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 92,
            "value": "#@ignore"
          }
        ],
        "line": 93,
        "name": "As a user i want to verify create rule, get rule, ensure rule is enabled by default",
        "description": "",
        "id": "this-feature-contains-smoke-test-cases-of-openwhisk-triggers;as-a-user-i-want-to-verify-create-rule,-get-rule,-ensure-rule-is-enabled-by-default",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "status": "skipped"
            },
            "line": 94,
            "name": "print \"Test case started --\u003e verify create rule, get rule, ensure rule is enabled by default\"",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 95,
                "value": "#create a trigger"
              }
            ],
            "line": 96,
            "name": "def createTrigger \u003d call read(\u0027classpath:com/karate/openwhisk/wsktriggers/create-trigger.feature\u0027) {nameSpace:\u0027#(nameSpace)\u0027 ,Auth:\u0027#(Auth)\u0027}",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 97,
            "name": "match createTrigger.responseStatusCode \u003d\u003d 200",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 98,
            "name": "def triggerName \u003d createTrigger.trgrName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 99,
            "name": "print \"Successfully Created an trigger\"",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 100,
                "value": "#create a action"
              }
            ],
            "line": 101,
            "name": "def createAction \u003d call read(\u0027classpath:com/karate/openwhisk/wskactions/create-action.feature\u0027) {script:\u0027#(scriptcode)\u0027 ,nameSpace:\u0027#(nameSpace)\u0027 ,Auth:\u0027#(Auth)\u0027}",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 102,
            "name": "def actionName \u003d createAction.actName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 103,
            "name": "match createAction.responseStatusCode \u003d\u003d 200",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 104,
            "name": "print \"Successfully Created an action\"",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 105,
                "value": "#create a rule"
              }
            ],
            "line": 106,
            "name": "def trgrName \u003d \u0027/\u0027+nameSpace +\u0027/\u0027+triggerName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 107,
            "name": "def actName \u003d \u0027/\u0027+nameSpace +\u0027/\u0027+actionName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 108,
            "name": "def createRule \u003d call read(\u0027classpath:com/karate/openwhisk/wskrules/create-rule.feature\u0027) {triggerName:\u0027#(trgrName)\u0027, actionName:\u0027#(actName)\u0027 ,nameSpace:\u0027#(nameSpace)\u0027 ,Auth:\u0027#(Auth)\u0027}",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 109,
            "name": "def ruleName \u003d createRule.rulName",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 110,
            "name": "match createRule.responseStatusCode \u003d\u003d 200",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 111,
            "name": "print \u0027successfully created the rule\u0027",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 112,
            "name": "def ruleStatus \u003d createRule.createRuleResponse.status",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 113,
            "name": "match ruleStatus \u003d\u003d \"active\"",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 114,
            "name": "print \"Asserted \"+ruleStatus+\" with active\"",
            "match": {},
            "keyword": "* "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 115,
            "name": "print \"Test case completed --\u003e verify create rule, get rule, ensure rule is enabled by default\"",
            "match": {},
            "keyword": "* "
          }
        ]
      }
    ],
    "name": "com/karate/openwhisk/smoketests/TC06_SmokeTest_Rule.feature",
    "description": "This feature contains smoke test cases of openwhisk triggers",
    "id": "this-feature-contains-smoke-test-cases-of-openwhisk-triggers",
    "keyword": "Feature",
    "uri": "com/karate/openwhisk/smoketests/TC06_SmokeTest_Rule.feature",
    "tags": [
      {
        "line": 18,
        "name": "@smoketests"
      }
    ]
  }
]