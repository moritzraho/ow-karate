<?xml version="1.0" encoding="UTF-8"?>
<testsuite failures="1"
           name="This feature file will test all the wsk functions"
           skipped="0"
           tests="1"
           time="2.438226">
   <testcase classname="com.karate.openwhisk.smoketests.TC01_SmokeTest_WSKFunctions"
             name="TC01-As a user I want to all the wsk functions available to the user and check if they give the proper response"
             time="2.438226">
      <failure message="com.intuit.karate.exception.KarateException: &#xA;&#xA;javascript evaluation failed: if (!test_user_key)&#xA;{&#xA;var getNSCreds = karate.callSingle('classpath:com/karate/openwhisk/wskadmin/get-user.feature');&#xA;var test=getNSCreds.Auth; &#xA;karate.set('authFunction',  'Basic '+getNSCreds.Auth);&#xA;karate.set('guid', getNSCreds.uuid[0]);&#xA;}   &#xA;else&#xA;{&#xA;var getGUID = base64decoding(test_user_key); &#xA;karate.set('authFunction' , 'Basic '+test_user_key);&#xA;karate.set('guid' , getGUID);&#xA;karate.log('I am here');&#xA;karate.log(getGUID);&#xA;}, &#xA;&#xA;status code was: 404, expected: 200, response time: 1217, url: https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test, response: {&#34;error&#34;:&#34;not_found&#34;,&#34;reason&#34;:&#34;missing&#34;}&#xA;&#x9;at com.intuit.karate.Script.evalFeatureCall(Script.java:1667)&#xA;&#x9;at com.intuit.karate.Script.call(Script.java:1599)&#xA;&#x9;at com.intuit.karate.Script.callWithCache(Script.java:183)&#xA;&#x9;at com.intuit.karate.Script.evalKarateExpression(Script.java:227)&#xA;&#x9;at com.intuit.karate.Script.evalKarateExpression(Script.java:171)&#xA;&#x9;at com.intuit.karate.Script.assign(Script.java:601)&#xA;&#x9;at com.intuit.karate.Script.assign(Script.java:527)&#xA;&#x9;at com.intuit.karate.StepDefs.def(StepDefs.java:309)&#xA;&#x9;at ✽.* def getAuth = callonce read('classpath:com/karate/openwhisk/utils/get-auth.feature')(/Users/rtripath/repo/OPENWHISK-KARATE/ow-karate/target/test-classes/com/karate/openwhisk/smoketests/TC01_SmokeTest_WSKFunctions.feature:28)&#xA;">* configure ssl = true......................................................passed
* def nameSpace = test_user_ns..............................................passed
* def params = '?blocking=true&amp;result=false'................................passed
* def scriptcode = call read('classpath:com/karate/openwhisk/functions/hello-world.js').passed
* call [This feature file will either use the NS credentials provided or get the NS of guest] [This line is required please do not delete - or the functions cannot be called] classpath:com/karate/openwhisk/utils/get-auth.feature.passed
* configure ssl = true......................................................passed
* def nameSpace = test_user_ns..............................................passed
* def base64decoding = read('classpath:com/karate/openwhisk/utils/base64_decode.js').passed
* print "Start".............................................................passed
* call [Create Namespace] [Get NS credentials] classpath:com/karate/openwhisk/wskadmin/get-user.feature.passed
* configure ssl = true......................................................passed
* def nameSpace = test_user_ns..............................................passed
* def base64encoding = read('classpath:com/karate/openwhisk/utils/base64.js').passed
Given url AdminBaseUrl......................................................passed
* print "I am here in get-user".............................................passed
* def DBpath =..............................................................passed
And path DBpath+nameSpace...................................................passed
And header Authorization = AdminAuth........................................passed
And header Content-Type = 'application/json'................................passed
When method get.............................................................passed
Then status 200.............................................................failed
* eval......................................................................failed
* def getAuth = callonce read('classpath:com/karate/openwhisk/utils/get-auth.feature').failed
* def Auth = getAuth.Auth...................................................skipped
* print 'I am inn TC01-' + Auth.............................................skipped
* def createAction = call read('classpath:com/karate/openwhisk/wskactions/create-action.feature') {script:'#(scriptcode)' ,nameSpace:'#(nameSpace)' ,Auth:'#(Auth)'}.skipped
* def actionName = createAction.actName.....................................skipped
* print actionName..........................................................skipped
* print "Successfully Created an action"....................................skipped
* def actionDetails = call read('classpath:com/karate/openwhisk/wskactions/get-action.feature') {nameSpace:'#(nameSpace)' ,Auth:'#(Auth)',actionName:'#(actionName)'}.skipped
* print "Successfully got the action details"...............................skipped
* def invokeAction = call read('classpath:com/karate/openwhisk/wskactions/invoke-action.feature') {params:'#(params)',requestBody:'',nameSpace:'#(nameSpace)' ,Auth:'#(Auth)',actionName:'#(actionName)'}.skipped
* def actID = invokeAction.activationId.....................................skipped
* print  = "Successfully invoked the action"................................skipped
* def webhooks = callonce read('classpath:com/karate/openwhisk/utils/sleep.feature') {sheepCount:'20'}.skipped
* def getActivationDetails = call read('classpath:com/karate/openwhisk/wskactions/get-activation-details.feature') { activationId: '#(actID)' ,Auth:'#(Auth)'}.skipped
* print "Successfully pulled the activation details"........................skipped
* def updateAction = call read('classpath:com/karate/openwhisk/wskactions/update-action.feature') {actionName:'#(actionName)',script:'#(scriptcode)' ,nameSpace:'#(nameSpace)' ,Auth:'#(Auth)'}.skipped
* def actionName = createAction.actName.....................................skipped
* print actionName..........................................................skipped
* print "Successfully updated the action"...................................skipped
* def listActions = call read('classpath:com/karate/openwhisk/wskactions/list-action.feature') {nameSpace:'#(nameSpace)' ,Auth:'#(Auth)'}.skipped
* print "Successfully pulled up the list of actions"........................skipped
* def deleteAction = call read('classpath:com/karate/openwhisk/wskactions/delete-action.feature') {actionName:'#(actionName)' ,nameSpace:'#(nameSpace)' ,Auth:'#(Auth)'}.skipped
* print "Successfully deleted the action"...................................skipped

StackTrace:
com.intuit.karate.exception.KarateException: 

javascript evaluation failed: if (!test_user_key)
{
var getNSCreds = karate.callSingle('classpath:com/karate/openwhisk/wskadmin/get-user.feature');
var test=getNSCreds.Auth; 
karate.set('authFunction',  'Basic '+getNSCreds.Auth);
karate.set('guid', getNSCreds.uuid[0]);
}   
else
{
var getGUID = base64decoding(test_user_key); 
karate.set('authFunction' , 'Basic '+test_user_key);
karate.set('guid' , getGUID);
karate.log('I am here');
karate.log(getGUID);
}, 

status code was: 404, expected: 200, response time: 1217, url: https://3678a12b-fc64-4cef-ab97-d7b28c77fbe1-bluemix.cloudant.com:443/whisk_dev_subjects/bladerunner-test, response: {"error":"not_found","reason":"missing"}
	at com.intuit.karate.Script.evalFeatureCall(Script.java:1667)
	at com.intuit.karate.Script.call(Script.java:1599)
	at com.intuit.karate.Script.callWithCache(Script.java:183)
	at com.intuit.karate.Script.evalKarateExpression(Script.java:227)
	at com.intuit.karate.Script.evalKarateExpression(Script.java:171)
	at com.intuit.karate.Script.assign(Script.java:601)
	at com.intuit.karate.Script.assign(Script.java:527)
	at com.intuit.karate.StepDefs.def(StepDefs.java:309)
	at ✽.* def getAuth = callonce read('classpath:com/karate/openwhisk/utils/get-auth.feature')(/Users/rtripath/repo/OPENWHISK-KARATE/ow-karate/target/test-classes/com/karate/openwhisk/smoketests/TC01_SmokeTest_WSKFunctions.feature:28)
</failure>
   </testcase>
</testsuite>
