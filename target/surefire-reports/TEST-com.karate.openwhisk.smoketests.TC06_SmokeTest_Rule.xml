<?xml version="1.0" encoding="UTF-8"?>
<testsuite failures="0"
           name="This feature contains smoke test cases of openwhisk triggers"
           skipped="0"
           tests="2"
           time="14.937354">
   <testcase classname="com.karate.openwhisk.smoketests.TC06_SmokeTest_Rule"
             name="As a user i want to verify create rule, get rule, update rule,list rule and delete rule"
             time="11.033271">
      <system-out>* configure ssl = true......................................................passed
* def nameSpace = 'guest'...................................................passed
* def nameSpace2 = 'normaluser'.............................................passed
* def scriptcode = call read('classpath:com/karate/openwhisk/functions/hello-world.js').passed
* def scriptcodeWithParam = call read('classpath:com/karate/openwhisk/functions/greetings.js').passed
* call [Create Namespace] [Get NS credentials] classpath:com/karate/openwhisk/wskadmin/get-user.feature.passed
* configure ssl = true......................................................passed
* def nameSpace = 'guest'...................................................passed
* def base64encoding = read('classpath:com/karate/openwhisk/utils/base64.js').passed
Given url AdminBaseUrl......................................................passed
* print "I am here in get-user".............................................passed
* def DBpath =..............................................................passed
And path DBpath+nameSpace...................................................passed
And header Authorization = AdminAuth........................................passed
And header Content-Type = 'application/json'................................passed
When method get.............................................................passed
Then status 200.............................................................passed
And string NScreds = response...............................................passed
* def uuid = $response.namespaces[*].uuid...................................passed
* def key = $response.namespaces[*].key.....................................passed
* def result = uuid[0]+':'+ key[0]..........................................passed
* def Auth = base64encoding(result).........................................passed
* print result..............................................................passed
* def FileUtil = Java.type('com.karate.openwhisk.utils.OWFileUtil').........passed
* string fileSaveResult = FileUtil.writeToFile(Auth, 'authFile.txt')........passed
* assert fileSaveResult == 'success'........................................passed
* def getNSCreds = call read('classpath:com/karate/openwhisk/wskadmin/get-user.feature') {nameSpace:'#(nameSpace)'}.passed
* def Auth = getNSCreds.Auth................................................passed
* print "Got the Creds for the guest user"..................................passed
* print Auth................................................................passed
* print "Test case started --&gt; verify create rule, get rule, update rule,list rule and delete rule".passed
* call [Create a Trigger] [As a user I want to create a trigger] classpath:com/karate/openwhisk/wsktriggers/create-trigger.feature.passed
* configure ssl = true......................................................passed
* eval......................................................................passed
* def requestBody = {"name":'#(triggerName)'}...............................passed
* string payload = requestBody..............................................passed
Given url BaseUrl+'/api/v1/namespaces/'+nameSpace+'/triggers/'+triggerName+'?overwrite=false'.passed
And header Authorization = Auth.............................................passed
And header Content-Type = 'application/json'................................passed
And request payload.........................................................passed
When method put.............................................................passed
* def responseStatusCode = responseStatus...................................passed
* print 'The value of responseStatusCode is:',responseStatusCode............passed
* eval......................................................................passed
* print 'Trigger name for the created trigger ' + trgrName..................passed
* def createTrigger = call read('classpath:com/karate/openwhisk/wsktriggers/create-trigger.feature') {nameSpace:'#(nameSpace)' ,Auth:'#(Auth)'}.passed
* match createTrigger.responseStatusCode == 200.............................passed
* def triggerName = createTrigger.trgrName..................................passed
* print "Successfully Created an trigger"...................................passed
* call [Create an Action] [As a user I want to create an action] classpath:com/karate/openwhisk/wskactions/create-action.feature.passed
* configure ssl = true......................................................passed
* eval......................................................................passed
* eval......................................................................passed
* def requestBody = {"namespace":'#(nameSpace)',"name":'#(actionName)',"exec":{"kind":"nodejs:default","code":'#(script)'},"annotations":[{"key":"web-export","value":true},{"key":"raw-http","value":false},{"key":"final","value":true}]}.passed
* string payload = requestBody..............................................passed
Given url BaseUrl+'/api/v1/namespaces/'+nameSpace+'/actions/'+actionName+'?overwrite=false'.passed
And header Authorization = Auth.............................................passed
And header Content-Type = 'application/json'................................passed
And request payload.........................................................passed
When method put.............................................................passed
* def responseStatusCode = responseStatus...................................passed
* print 'The value of responseStatusCode is:',responseStatusCode............passed
* eval......................................................................passed
* eval if(responseStatusCode == 200) karate.set('actName', response.name )..passed
* print 'Action name for the created action ' + actName.....................passed
* def createAction = call read('classpath:com/karate/openwhisk/wskactions/create-action.feature') {script:'#(scriptcode)' ,nameSpace:'#(nameSpace)' ,Auth:'#(Auth)'}.passed
* def actionName = createAction.actName.....................................passed
* match createAction.responseStatusCode == 200..............................passed
* print "Successfully Created an action"....................................passed
* def trgrName = '/'+nameSpace +'/'+triggerName.............................passed
* def actName = '/'+nameSpace +'/'+actionName...............................passed
* call [Create a Rule] [As a user I want to create a rule] classpath:com/karate/openwhisk/wskrules/create-rule.feature.passed
* configure ssl = true......................................................passed
* eval......................................................................passed
* def requestBody = {"name":'#(ruleName)',"status":"","trigger":'#(trgrName)',"action":'#(actName)'}.passed
* string payload = requestBody..............................................passed
Given url BaseUrl+'/api/v1/namespaces/'+nameSpace+'/rules/'+ruleName+'?overwrite=false'.passed
And header Authorization = Auth.............................................passed
And header Content-Type = 'application/json'................................passed
And request payload.........................................................passed
When method put.............................................................passed
* def responseStatusCode = responseStatus...................................passed
* def createRuleResponse = response.........................................passed
* print 'The value of responseStatusCode is:',responseStatusCode............passed
* eval......................................................................passed
* print 'Rule name for the created rule ' + rulName.........................passed
* def createRule = call read('classpath:com/karate/openwhisk/wskrules/create-rule.feature') {triggerName:'#(trgrName)', actionName:'#(actName)' ,nameSpace:'#(nameSpace)' ,Auth:'#(Auth)'}.passed
* def ruleName = createRule.rulName.........................................passed
* match createRule.responseStatusCode == 200................................passed
* print 'successfully created the rule'.....................................passed
* call [Get a Rule details] [As a user i want to get the details of a rule] classpath:com/karate/openwhisk/wskrules/get-rule.feature.passed
* configure ssl = true......................................................passed
Given url BaseUrl...........................................................passed
And path '/api/v1/namespaces/'+nameSpace+'/rules/'+ruleName.................passed
And header Authorization = Auth.............................................passed
And header Content-Type = 'application/json'................................passed
When method get.............................................................passed
* def responseStatusCode = responseStatus...................................passed
* def rulName = response.name...............................................passed
* print 'The value of responseStatusCode is:',responseStatusCode............passed
* eval......................................................................passed
* def getRule = call read('classpath:com/karate/openwhisk/wskrules/get-rule.feature') {nameSpace:'#(nameSpace)' ,Auth:'#(Auth)',ruleName:'#(ruleName)'}.passed
* match getRule.responseStatusCode == 200...................................passed
* def actualRuleName = getRule.rulName......................................passed
* match actualRuleName == ruleName..........................................passed
* print "Asserted "+actualRuleName+" with " + ruleName......................passed
* print "Successfully got the rule details".................................passed
* def trgrName1 = 'Trigger'+java.util.UUID.randomUUID().....................passed
* call [Create a Trigger] [As a user I want to create a trigger] classpath:com/karate/openwhisk/wsktriggers/create-trigger.feature.passed
* configure ssl = true......................................................passed
* eval......................................................................passed
* def requestBody = {"name":'#(triggerName)'}...............................passed
* string payload = requestBody..............................................passed
Given url BaseUrl+'/api/v1/namespaces/'+nameSpace+'/triggers/'+triggerName+'?overwrite=false'.passed
And header Authorization = Auth.............................................passed
And header Content-Type = 'application/json'................................passed
And request payload.........................................................passed
When method put.............................................................passed
* def responseStatusCode = responseStatus...................................passed
* print 'The value of responseStatusCode is:',responseStatusCode............passed
* eval......................................................................passed
* print 'Trigger name for the created trigger ' + trgrName..................passed
* def createTrigger = call read('classpath:com/karate/openwhisk/wsktriggers/create-trigger.feature') {nameSpace:'#(nameSpace)' ,Auth:'#(Auth)', triggerName:'#(trgrName1)'}.passed
* def triggerName1 = createTrigger.trgrName.................................passed
* match createTrigger.responseStatusCode == 200.............................passed
* print "Successfully Created an trigger"...................................passed
* def actName1 = 'Testing'+java.util.UUID.randomUUID()......................passed
* call [Create an Action] [As a user I want to create an action] classpath:com/karate/openwhisk/wskactions/create-action.feature.passed
* configure ssl = true......................................................passed
* eval......................................................................passed
* eval......................................................................passed
* def requestBody = {"namespace":'#(nameSpace)',"name":'#(actionName)',"exec":{"kind":"nodejs:default","code":'#(script)'},"annotations":[{"key":"web-export","value":true},{"key":"raw-http","value":false},{"key":"final","value":true}]}.passed
* string payload = requestBody..............................................passed
Given url BaseUrl+'/api/v1/namespaces/'+nameSpace+'/actions/'+actionName+'?overwrite=false'.passed
And header Authorization = Auth.............................................passed
And header Content-Type = 'application/json'................................passed
And request payload.........................................................passed
When method put.............................................................passed
* def responseStatusCode = responseStatus...................................passed
* print 'The value of responseStatusCode is:',responseStatusCode............passed
* eval......................................................................passed
* eval if(responseStatusCode == 200) karate.set('actName', response.name )..passed
* print 'Action name for the created action ' + actName.....................passed
* def createAction = call read('classpath:com/karate/openwhisk/wskactions/create-action.feature') {actionName:'#(actName1)', script:'#(scriptcode)' ,nameSpace:'#(nameSpace)' ,Auth:'#(Auth)'}.passed
* def actionName1 = createAction.actName....................................passed
* match createAction.responseStatusCode == 200..............................passed
* print "Successfully Created an action"....................................passed
* def trgrName = '/'+nameSpace +'/'+triggerName1............................passed
* def actName = '/'+nameSpace +'/'+actionName1..............................passed
* call [Update a Rule] [As a user I want to update a rule] classpath:com/karate/openwhisk/wskrules/update-rule.feature.passed
* configure ssl = true......................................................passed
* def requestBody = {"name":'#(ruleName)',"status":"","trigger":'#(trgrName)',"action":'#(actName)'}.passed
* string payload = requestBody..............................................passed
Given url BaseUrl+'/api/v1/namespaces/'+nameSpace+'/rules/'+ruleName+'?overwrite=true'.passed
And header Authorization = Auth.............................................passed
And header Content-Type = 'application/json'................................passed
And request payload.........................................................passed
When method put.............................................................passed
* def responseStatusCode = responseStatus...................................passed
* def updateRuleResponse = response.........................................passed
* print 'The value of responseStatusCode is:',responseStatusCode............passed
* eval......................................................................passed
* print 'Rule name for the updated rule ' + rulName.........................passed
* def updateRule = call read('classpath:com/karate/openwhisk/wskrules/update-rule.feature') {ruleName:'#(ruleName)', triggerName:'#(trgrName)', actionName:'#(actName)' ,nameSpace:'#(nameSpace)' ,Auth:'#(Auth)'}.passed
* def ruleName = updateRule.rulName.........................................passed
* print ruleName............................................................passed
* def actualTriggerName = updateRule.updateRuleResponse.trigger.name........passed
* match actualTriggerName == trgrName1......................................passed
* print "Asserted "+actualTriggerName+" with " + trgrName1..................passed
* def actualActionName = updateRule.updateRuleResponse.action.name..........passed
* match actualActionName == actName1........................................passed
* print "Asserted "+actualActionName+" with " + actName1....................passed
* print "Successfully updated the rule".....................................passed
* call [Get List of rules based on the NameSpace] [As a user I want to get the list of rules available for the given namespace] classpath:com/karate/openwhisk/wskrules/list-rule.feature.passed
* configure ssl = true......................................................passed
* def path = '/api/v1/namespaces/'+nameSpace+'/rules?limit=30&amp;skip=0'.......passed
Given url BaseUrl+path......................................................passed
And header Authorization = Auth.............................................passed
And header Content-Type = 'application/json'................................passed
When method get.............................................................passed
Then status 200.............................................................passed
And def json = response.....................................................passed
* def listRules = call read('classpath:com/karate/openwhisk/wskrules/list-rule.feature') {nameSpace:'#(nameSpace)' ,Auth:'#(Auth)'}.passed
* print "Successfully pulled up the list of rules"..........................passed
* call [Delete the rule on the basis of the rule name] [As a user I want to get the list of rules available for the given namespace] classpath:com/karate/openwhisk/wskrules/delete-rule.feature.passed
* configure ssl = true......................................................passed
* def path = '/api/v1/namespaces/'+nameSpace+'/rules/'+ruleName.............passed
Given url BaseUrl+path......................................................passed
And header Authorization = Auth.............................................passed
And header Content-Type = 'application/json'................................passed
When method delete..........................................................passed
* def responseStatusCode = responseStatus...................................passed
* print 'The value of responseStatusCode is:',responseStatusCode............passed
* eval......................................................................passed
* def deleteRule = call read('classpath:com/karate/openwhisk/wskrules/delete-rule.feature') {nameSpace:'#(nameSpace)' ,Auth:'#(Auth)',ruleName:'#(ruleName)'}.passed
* match deleteRule.responseStatusCode == 200................................passed
* print "Test case completed --&gt; verify create rule, get rule, update rule,list rule and delete rule".passed
</system-out>
   </testcase>
   <testcase classname="com.karate.openwhisk.smoketests.TC06_SmokeTest_Rule"
             name="As a user i want to verify create rule, get rule, ensure rule is enabled by default"
             time="3.904083">
      <system-out>* configure ssl = true......................................................passed
* def nameSpace = 'guest'...................................................passed
* def nameSpace2 = 'normaluser'.............................................passed
* def scriptcode = call read('classpath:com/karate/openwhisk/functions/hello-world.js').passed
* def scriptcodeWithParam = call read('classpath:com/karate/openwhisk/functions/greetings.js').passed
* call [Create Namespace] [Get NS credentials] classpath:com/karate/openwhisk/wskadmin/get-user.feature.passed
* configure ssl = true......................................................passed
* def nameSpace = 'guest'...................................................passed
* def base64encoding = read('classpath:com/karate/openwhisk/utils/base64.js').passed
Given url AdminBaseUrl......................................................passed
* print "I am here in get-user".............................................passed
* def DBpath =..............................................................passed
And path DBpath+nameSpace...................................................passed
And header Authorization = AdminAuth........................................passed
And header Content-Type = 'application/json'................................passed
When method get.............................................................passed
Then status 200.............................................................passed
And string NScreds = response...............................................passed
* def uuid = $response.namespaces[*].uuid...................................passed
* def key = $response.namespaces[*].key.....................................passed
* def result = uuid[0]+':'+ key[0]..........................................passed
* def Auth = base64encoding(result).........................................passed
* print result..............................................................passed
* def FileUtil = Java.type('com.karate.openwhisk.utils.OWFileUtil').........passed
* string fileSaveResult = FileUtil.writeToFile(Auth, 'authFile.txt')........passed
* assert fileSaveResult == 'success'........................................passed
* def getNSCreds = call read('classpath:com/karate/openwhisk/wskadmin/get-user.feature') {nameSpace:'#(nameSpace)'}.passed
* def Auth = getNSCreds.Auth................................................passed
* print "Got the Creds for the guest user"..................................passed
* print Auth................................................................passed
* print "Test case started --&gt; verify create rule, get rule, ensure rule is enabled by default".passed
* call [Create a Trigger] [As a user I want to create a trigger] classpath:com/karate/openwhisk/wsktriggers/create-trigger.feature.passed
* configure ssl = true......................................................passed
* eval......................................................................passed
* def requestBody = {"name":'#(triggerName)'}...............................passed
* string payload = requestBody..............................................passed
Given url BaseUrl+'/api/v1/namespaces/'+nameSpace+'/triggers/'+triggerName+'?overwrite=false'.passed
And header Authorization = Auth.............................................passed
And header Content-Type = 'application/json'................................passed
And request payload.........................................................passed
When method put.............................................................passed
* def responseStatusCode = responseStatus...................................passed
* print 'The value of responseStatusCode is:',responseStatusCode............passed
* eval......................................................................passed
* print 'Trigger name for the created trigger ' + trgrName..................passed
* def createTrigger = call read('classpath:com/karate/openwhisk/wsktriggers/create-trigger.feature') {nameSpace:'#(nameSpace)' ,Auth:'#(Auth)'}.passed
* match createTrigger.responseStatusCode == 200.............................passed
* def triggerName = createTrigger.trgrName..................................passed
* print "Successfully Created an trigger"...................................passed
* call [Create an Action] [As a user I want to create an action] classpath:com/karate/openwhisk/wskactions/create-action.feature.passed
* configure ssl = true......................................................passed
* eval......................................................................passed
* eval......................................................................passed
* def requestBody = {"namespace":'#(nameSpace)',"name":'#(actionName)',"exec":{"kind":"nodejs:default","code":'#(script)'},"annotations":[{"key":"web-export","value":true},{"key":"raw-http","value":false},{"key":"final","value":true}]}.passed
* string payload = requestBody..............................................passed
Given url BaseUrl+'/api/v1/namespaces/'+nameSpace+'/actions/'+actionName+'?overwrite=false'.passed
And header Authorization = Auth.............................................passed
And header Content-Type = 'application/json'................................passed
And request payload.........................................................passed
When method put.............................................................passed
* def responseStatusCode = responseStatus...................................passed
* print 'The value of responseStatusCode is:',responseStatusCode............passed
* eval......................................................................passed
* eval if(responseStatusCode == 200) karate.set('actName', response.name )..passed
* print 'Action name for the created action ' + actName.....................passed
* def createAction = call read('classpath:com/karate/openwhisk/wskactions/create-action.feature') {script:'#(scriptcode)' ,nameSpace:'#(nameSpace)' ,Auth:'#(Auth)'}.passed
* def actionName = createAction.actName.....................................passed
* match createAction.responseStatusCode == 200..............................passed
* print "Successfully Created an action"....................................passed
* def trgrName = '/'+nameSpace +'/'+triggerName.............................passed
* def actName = '/'+nameSpace +'/'+actionName...............................passed
* call [Create a Rule] [As a user I want to create a rule] classpath:com/karate/openwhisk/wskrules/create-rule.feature.passed
* configure ssl = true......................................................passed
* eval......................................................................passed
* def requestBody = {"name":'#(ruleName)',"status":"","trigger":'#(trgrName)',"action":'#(actName)'}.passed
* string payload = requestBody..............................................passed
Given url BaseUrl+'/api/v1/namespaces/'+nameSpace+'/rules/'+ruleName+'?overwrite=false'.passed
And header Authorization = Auth.............................................passed
And header Content-Type = 'application/json'................................passed
And request payload.........................................................passed
When method put.............................................................passed
* def responseStatusCode = responseStatus...................................passed
* def createRuleResponse = response.........................................passed
* print 'The value of responseStatusCode is:',responseStatusCode............passed
* eval......................................................................passed
* print 'Rule name for the created rule ' + rulName.........................passed
* def createRule = call read('classpath:com/karate/openwhisk/wskrules/create-rule.feature') {triggerName:'#(trgrName)', actionName:'#(actName)' ,nameSpace:'#(nameSpace)' ,Auth:'#(Auth)'}.passed
* def ruleName = createRule.rulName.........................................passed
* match createRule.responseStatusCode == 200................................passed
* print 'successfully created the rule'.....................................passed
* def ruleStatus = createRule.createRuleResponse.status.....................passed
* match ruleStatus == "active"..............................................passed
* print "Asserted "+ruleStatus+" with active"...............................passed
* print "Test case completed --&gt; verify create rule, get rule, ensure rule is enabled by default".passed
</system-out>
   </testcase>
</testsuite>
